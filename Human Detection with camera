import cv2
import tkinter as tk
from tkinter import Label, Button
from PIL import Image, ImageTk
import threading
import winsound

class HumanDetectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Human Detection")

        # Initialize the video capture
        self.cap = cv2.VideoCapture(0)

        if not self.cap.isOpened():
            print("Error: Could not open webcam.")
            exit()

        # Load the pre-trained HOG descriptor for human detection
        self.hog = cv2.HOGDescriptor()
        self.hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

        # Create a label to display the video feed
        self.label = Label(self.root)
        self.label.pack()

        # Create a button to close the application
        self.close_button = Button(self.root, text="Close", command=self.close)
        self.close_button.pack()

        # Flag to track if the alarm is active
        self.alarm_active = False

        # Start the video feed
        self.update_video_feed()

    def update_video_feed(self):
        # Capture frame-by-frame
        ret, frame = self.cap.read()

        if not ret:
            print("Error: Could not read frame.")
            return

        # Detect humans in the frame
        (humans, _) = self.hog.detectMultiScale(frame, winStride=(8, 8), padding=(8, 8), scale=1.05)

        # Draw rectangles around the detected humans
        for (x, y, w, h) in humans:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        # Check if more than two humans are detected
        if len(humans) > 2:
            if not self.alarm_active:
                self.alarm_active = True
                threading.Thread(target=self.play_alert_sound).start()
        else:
            self.alarm_active = False  # Deactivate alarm when fewer than 3 humans

        # Convert the frame to RGB (OpenCV uses BGR by default)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Convert the frame to a PIL image
        pil_image = Image.fromarray(rgb_frame)

        # Convert the PIL image to an ImageTk object
        imgtk = ImageTk.PhotoImage(image=pil_image)

        # Update the label with the new frame
        self.label.imgtk = imgtk
        self.label.configure(image=imgtk)

        # Schedule the next update
        self.root.after(10, self.update_video_feed)

    def play_alert_sound(self):
        while self.alarm_active:
            winsound.Beep(1000, 500)  # 1000 Hz frequency, 500 ms duration

    def close(self):
        # Release the video capture
        self.cap.release()

        # Destroy the Tkinter window
        self.root.destroy()

# Create the Tkinter window
root = tk.Tk()

# Create the HumanDetectionApp object
app = HumanDetectionApp(root)

# Run the Tkinter main loop
root.mainloop()
